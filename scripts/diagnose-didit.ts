#!/usr/bin/env tsx

/**
 * Script de diagn√≥stico detallado para Didit.me
 * Ayuda a identificar problemas espec√≠ficos en la integraci√≥n
 */

import { config } from 'dotenv';

// Cargar variables de entorno
config({ path: '.env.local' });

class DiditDiagnostic {
  async runDiagnostic(): Promise<void> {
    console.log('üîç DIAGN√ìSTICO DETALLADO DE DIDIT.ME');
    console.log('=' .repeat(50));

    await this.checkEnvironmentVariables();
    await this.testApiEndpoint();
    await this.testAuthentication();
    await this.checkWebhookConfiguration();
    await this.provideNextSteps();
  }

  private async checkEnvironmentVariables(): Promise<void> {
    console.log('\nüîß Verificando variables de entorno...');
    
    const vars = {
      'DIDIT_API_KEY': process.env.DIDIT_API_KEY,
      'DIDIT_WEBHOOK_SECRET': process.env.DIDIT_WEBHOOK_SECRET,
      'DIDIT_BASE_URL': process.env.DIDIT_BASE_URL,
      'NEXT_PUBLIC_SITE_URL': process.env.NEXT_PUBLIC_SITE_URL
    };

    for (const [key, value] of Object.entries(vars)) {
      if (!value) {
        console.log(`‚ùå ${key}: NO CONFIGURADA`);
      } else if (value.includes('tu_') || value.includes('aqui')) {
        console.log(`‚ö†Ô∏è  ${key}: VALOR PLACEHOLDER`);
      } else {
        console.log(`‚úÖ ${key}: CONFIGURADA`);
        if (key === 'DIDIT_API_KEY') {
          console.log(`   Formato: ${value.startsWith('f-') ? 'Correcto' : 'Incorrecto'}`);
          console.log(`   Longitud: ${value.length} caracteres`);
        }
        if (key === 'DIDIT_WEBHOOK_SECRET') {
          console.log(`   Longitud: ${value.length} caracteres`);
        }
      }
    }
  }

  private async testApiEndpoint(): Promise<void> {
    console.log('\nüåê Probando endpoint de API...');
    
    const baseUrl = process.env.DIDIT_BASE_URL;
    const apiKey = process.env.DIDIT_API_KEY;
    
    if (!baseUrl || !apiKey) {
      console.log('‚ùå No se pueden probar endpoints sin configuraci√≥n b√°sica');
      return;
    }

    try {
      // Probar endpoint de salud/status
      const healthUrl = `${baseUrl}/health`;
      console.log(`   Probando: ${healthUrl}`);
      
      const response = await fetch(healthUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      console.log(`   Status: ${response.status}`);
      console.log(`   Headers: ${JSON.stringify(Object.fromEntries(response.headers.entries()))}`);
      
      if (response.ok) {
        const data = await response.text();
        console.log(`   Respuesta: ${data}`);
      } else {
        const error = await response.text();
        console.log(`   Error: ${error}`);
      }
    } catch (error: any) {
      console.log(`   Error de conexi√≥n: ${error.message}`);
    }

    try {
      // Probar endpoint de sesiones
      const sessionsUrl = `${baseUrl}/v2/sessions`;
      console.log(`   Probando: ${sessionsUrl}`);
      
      const response = await fetch(sessionsUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      console.log(`   Status: ${response.status}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`   Respuesta: ${JSON.stringify(data, null, 2)}`);
      } else {
        const error = await response.text();
        console.log(`   Error: ${error}`);
      }
    } catch (error: any) {
      console.log(`   Error de conexi√≥n: ${error.message}`);
    }
  }

  private async testAuthentication(): Promise<void> {
    console.log('\nüîê Probando autenticaci√≥n...');
    
    const baseUrl = process.env.DIDIT_BASE_URL;
    const apiKey = process.env.DIDIT_API_KEY;
    
    if (!baseUrl || !apiKey) {
      console.log('‚ùå No se puede probar autenticaci√≥n sin configuraci√≥n b√°sica');
      return;
    }

    try {
      // Probar con endpoint que requiere autenticaci√≥n
      const authUrl = `${baseUrl}/v2/account`;
      console.log(`   Probando autenticaci√≥n en: ${authUrl}`);
      
      const response = await fetch(authUrl, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      console.log(`   Status: ${response.status}`);
      
      if (response.status === 401) {
        console.log('   ‚ùå API Key inv√°lida o expirada');
      } else if (response.status === 403) {
        console.log('   ‚ö†Ô∏è  API Key v√°lida pero sin permisos suficientes');
      } else if (response.ok) {
        console.log('   ‚úÖ Autenticaci√≥n exitosa');
        const data = await response.json();
        console.log(`   Datos de cuenta: ${JSON.stringify(data, null, 2)}`);
      } else {
        const error = await response.text();
        console.log(`   Error: ${error}`);
      }
    } catch (error: any) {
      console.log(`   Error de conexi√≥n: ${error.message}`);
    }
  }

  private async checkWebhookConfiguration(): Promise<void> {
    console.log('\nüîó Verificando configuraci√≥n de webhook...');
    
    const webhookUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/api/webhooks/didit`;
    console.log(`   URL del webhook: ${webhookUrl}`);
    
    try {
      const response = await fetch(webhookUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      console.log(`   Status: ${response.status}`);
      
      if (response.status === 404) {
        console.log('   ‚ö†Ô∏è  Endpoint no encontrado (normal si no est√° desplegado)');
      } else if (response.status === 405) {
        console.log('   ‚úÖ Endpoint existe pero requiere POST (correcto)');
      } else {
        console.log(`   Respuesta: ${response.status}`);
      }
    } catch (error: any) {
      console.log(`   Error: ${error.message}`);
    }
  }

  private async provideNextSteps(): Promise<void> {
    console.log('\nüìã PR√ìXIMOS PASOS RECOMENDADOS:');
    console.log('=' .repeat(50));
    
    console.log('\n1. üîë VERIFICAR API KEY:');
    console.log('   - Confirma que la API key sea v√°lida en el dashboard de Didit');
    console.log('   - Verifica que tenga permisos para crear sesiones');
    console.log('   - Aseg√∫rate de que no haya expirado');
    
    console.log('\n2. üåê VERIFICAR ENDPOINT:');
    console.log('   - Confirma que la URL base sea correcta: https://api.didit.me');
    console.log('   - Verifica que la API est√© disponible');
    console.log('   - Revisa la documentaci√≥n de Didit para cambios recientes');
    
    console.log('\n3. üîó CONFIGURAR WEBHOOK:');
    console.log('   - Ve al dashboard de Didit');
    console.log('   - Configura el webhook URL: https://red-salud.org/api/webhooks/didit');
    console.log('   - Usa el secret: NplZn8ap277JVQUxE6K3Ta9JlruolpnNfGzaBuAB0Ck');
    
    console.log('\n4. üß™ PROBAR MANUALMENTE:');
    console.log('   - Usa Postman o curl para probar la API directamente');
    console.log('   - Crea una sesi√≥n de prueba desde el dashboard');
    console.log('   - Verifica que los webhooks lleguen correctamente');
    
    console.log('\n5. üìû CONTACTAR SOPORTE:');
    console.log('   - Si todo parece correcto, contacta soporte de Didit');
    console.log('   - Proporciona la API key y los logs de error');
    console.log('   - Solicita verificaci√≥n de la configuraci√≥n');
    
    console.log('\nüí° COMANDOS √öTILES:');
    console.log('   npm run test:didit          # Ejecutar pruebas completas');
    console.log('   npm run dev                 # Iniciar servidor de desarrollo');
    console.log('   npm run build               # Construir para producci√≥n');
  }
}

// Ejecutar diagn√≥stico
async function main() {
  try {
    const diagnostic = new DiditDiagnostic();
    await diagnostic.runDiagnostic();
  } catch (error) {
    console.error('‚ùå Error ejecutando diagn√≥stico:', error);
    process.exit(1);
  }
}

main();
