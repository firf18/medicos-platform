/**
 * üîç DIAGN√ìSTICO ESPEC√çFICO DEL PROBLEMA DEL 15%
 * 
 * Script para diagnosticar por qu√© el progreso se queda en 15% y no avanza
 */

// Cargar variables de entorno
require('dotenv').config({ path: '.env.local' });

console.log('üîç DIAGN√ìSTICO ESPEC√çFICO DEL PROBLEMA DEL 15%');
console.log('='.repeat(60));

/**
 * Probar creaci√≥n de sesi√≥n
 */
async function testSessionCreation() {
  console.log('\nüì° PROBANDO CREACI√ìN DE SESI√ìN');
  console.log('-'.repeat(40));

  try {
    const testData = {
      doctor_id: 'V-TEST123456',
      first_name: 'Test',
      last_name: 'Doctor',
      date_of_birth: '1990-01-01',
      nationality: 'Venezuelan',
      document_number: 'V-TEST123456',
      email: 'test@test.com',
      phone: '+584241234567'
    };

    console.log('üì§ Enviando datos:', testData);

    const response = await fetch('http://localhost:3000/api/didit/doctor-verification', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });

    console.log(`üì° Response Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå ERROR EN CREACI√ìN DE SESI√ìN:');
      console.log(`   Error: ${errorText}`);
      return null;
    }

    const sessionData = await response.json();
    
    console.log('‚úÖ SESI√ìN CREADA EXITOSAMENTE:');
    console.log(`   Session ID: ${sessionData.session_id}`);
    console.log(`   Status: ${sessionData.status}`);
    console.log(`   Success: ${sessionData.success}`);
    console.log(`   Message: ${sessionData.message}`);

    return sessionData;

  } catch (error) {
    console.log('‚ùå ERROR EN CREACI√ìN DE SESI√ìN:');
    console.log(`   Error: ${error.message}`);
    return null;
  }
}

/**
 * Probar polling de estado
 */
async function testStatusPolling(sessionId, maxAttempts = 10) {
  console.log('\nüîÑ PROBANDO POLLING DE ESTADO');
  console.log('-'.repeat(40));

  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      console.log(`üì° Polling attempt #${attempt} para sesi√≥n: ${sessionId}`);

      const response = await fetch(`http://localhost:3000/api/didit/status/${sessionId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      console.log(`   Response Status: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.log(`‚ùå ERROR EN POLLING #${attempt}:`);
        console.log(`   Error: ${errorText}`);
        
        if (attempt < maxAttempts) {
          console.log(`   Esperando 3 segundos antes del siguiente intento...`);
          await new Promise(resolve => setTimeout(resolve, 3000));
          continue;
        } else {
          return null;
        }
      }

      const statusData = await response.json();
      
      console.log(`‚úÖ POLLING #${attempt} EXITOSO:`);
      console.log(`   Session ID: ${statusData.session_id || 'N/A'}`);
      console.log(`   Status: ${statusData.status || 'N/A'}`);
      console.log(`   Decision: ${statusData.decision?.status || 'N/A'}`);
      console.log(`   Timestamp: ${new Date().toISOString()}`);

      // Simular l√≥gica de progreso del frontend
      let progress = 15; // Progreso inicial
      let internalStatus = 'user_verifying';

      switch (statusData.status) {
        case 'Not Started':
          progress = 20;
          internalStatus = 'user_verifying';
          break;
        case 'In Progress':
          progress = Math.min(20 + (attempt * 10), 80);
          internalStatus = 'user_verifying';
          break;
        case 'In Review':
          progress = 85;
          internalStatus = 'processing';
          break;
        case 'Approved':
          progress = 100;
          internalStatus = 'completed';
          break;
        case 'Declined':
          progress = 100;
          internalStatus = 'failed';
          break;
        default:
          progress = Math.min(progress + 5, 80);
      }

      console.log(`   Progreso calculado: ${progress}%`);
      console.log(`   Estado interno: ${internalStatus}`);

      // Si est√° completado, terminar
      if (statusData.status === 'Approved' || statusData.status === 'Declined') {
        console.log('üèÅ Verificaci√≥n completada, terminando polling');
        return statusData;
      }

      // Esperar antes del siguiente polling
      if (attempt < maxAttempts) {
        console.log(`   Esperando 3 segundos antes del siguiente polling...`);
        await new Promise(resolve => setTimeout(resolve, 3000));
      }

    } catch (error) {
      console.log(`‚ùå ERROR EN POLLING #${attempt}:`);
      console.log(`   Error: ${error.message}`);
      
      if (attempt < maxAttempts) {
        console.log(`   Esperando 3 segundos antes del siguiente intento...`);
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
  }

  console.log(`‚ö†Ô∏è Polling terminado despu√©s de ${maxAttempts} intentos`);
  return null;
}

/**
 * Verificar configuraci√≥n del servidor
 */
async function checkServerConfiguration() {
  console.log('\nüîß VERIFICANDO CONFIGURACI√ìN DEL SERVIDOR');
  console.log('-'.repeat(40));

  try {
    // Verificar que el servidor est√© funcionando
    const response = await fetch('http://localhost:3000', {
      method: 'GET',
      headers: {
        'Accept': 'text/html',
      }
    });

    console.log(`üì° Servidor Status: ${response.status} ${response.statusText}`);

    if (response.ok) {
      console.log('‚úÖ Servidor funcionando correctamente');
    } else {
      console.log('‚ùå Servidor no responde correctamente');
      return false;
    }

    // Verificar endpoint de Didit
    const diditResponse = await fetch('http://localhost:3000/api/didit/doctor-verification', {
      method: 'OPTIONS',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    console.log(`üì° Didit Endpoint Status: ${diditResponse.status} ${diditResponse.statusText}`);

    if (diditResponse.ok || diditResponse.status === 405) { // 405 = Method Not Allowed es normal para OPTIONS
      console.log('‚úÖ Endpoint de Didit accesible');
    } else {
      console.log('‚ùå Endpoint de Didit no accesible');
      return false;
    }

    return true;

  } catch (error) {
    console.log('‚ùå ERROR VERIFICANDO SERVIDOR:');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

/**
 * Funci√≥n principal de diagn√≥stico
 */
async function runDiagnosis() {
  console.log('üöÄ INICIANDO DIAGN√ìSTICO DEL PROBLEMA DEL 15%...\n');

  // 1. Verificar configuraci√≥n del servidor
  const serverOk = await checkServerConfiguration();
  if (!serverOk) {
    console.log('\n‚ùå No se puede continuar sin servidor funcionando');
    console.log('   Ejecuta: npm run dev');
    return;
  }

  // 2. Probar creaci√≥n de sesi√≥n
  const sessionData = await testSessionCreation();
  if (!sessionData) {
    console.log('\n‚ùå No se puede continuar sin sesi√≥n v√°lida');
    return;
  }

  // 3. Probar polling de estado
  const finalStatus = await testStatusPolling(sessionData.session_id);

  console.log('\n' + '='.repeat(60));
  console.log('üìã RESUMEN DEL DIAGN√ìSTICO');
  console.log('');
  
  if (finalStatus) {
    console.log('‚úÖ DIAGN√ìSTICO COMPLETADO EXITOSAMENTE');
    console.log(`   Estado final: ${finalStatus.status}`);
    console.log(`   Decisi√≥n: ${finalStatus.decision?.status || 'N/A'}`);
  } else {
    console.log('‚ö†Ô∏è DIAGN√ìSTICO COMPLETADO CON PROBLEMAS');
    console.log('   El polling no pudo completarse exitosamente');
  }

  console.log('');
  console.log('üîç AN√ÅLISIS DEL PROBLEMA DEL 15%:');
  console.log('');
  console.log('   Si el progreso se queda en 15%, las posibles causas son:');
  console.log('   1. ‚ùå El polling no se est√° ejecutando');
  console.log('   2. ‚ùå El endpoint de status no responde correctamente');
  console.log('   3. ‚ùå La l√≥gica de progreso en el frontend tiene un bug');
  console.log('   4. ‚ùå El estado de Didit no est√° cambiando');
  console.log('   5. ‚ùå Hay un error JavaScript que impide la ejecuci√≥n');
  console.log('');
  console.log('üîß PR√ìXIMOS PASOS:');
  console.log('');
  console.log('   1. ‚úÖ Revisa los logs de este script');
  console.log('   2. ‚úÖ Verifica la consola del navegador');
  console.log('   3. ‚úÖ Usa el componente de prueba en /test-didit');
  console.log('   4. ‚úÖ Monitorea el progreso en tiempo real');
  console.log('');
  console.log('üìù NOTAS:');
  console.log('   - El progreso inicial es 15% cuando se crea la sesi√≥n');
  console.log('   - Deber√≠a avanzar a 20% cuando el estado es "Not Started"');
  console.log('   - Deber√≠a incrementar gradualmente durante "In Progress"');
  console.log('   - Deber√≠a llegar a 100% cuando est√° "Approved" o "Declined"');
}

// Ejecutar diagn√≥stico
if (require.main === module) {
  runDiagnosis().catch(error => {
    console.error('‚ùå Error ejecutando diagn√≥stico:', error);
    process.exit(1);
  });
}

module.exports = {
  testSessionCreation,
  testStatusPolling,
  checkServerConfiguration
};
