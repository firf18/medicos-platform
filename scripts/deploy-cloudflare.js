#!/usr/bin/env node

/**
 * Script de despliegue para Cloudflare Pages
 * Configura y despliega la aplicaci√≥n Red-Salud
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ INICIANDO DESPLIEGUE A CLOUDFLARE PAGES');
console.log('=' .repeat(50));

// Verificar que estamos en el directorio correcto
if (!fs.existsSync('package.json')) {
  console.error('‚ùå No se encontr√≥ package.json. Ejecuta este script desde la ra√≠z del proyecto.');
  process.exit(1);
}

// Verificar variables de entorno
const envFile = '.env.local';
if (!fs.existsSync(envFile)) {
  console.error('‚ùå No se encontr√≥ .env.local. Copia env.example y configura las variables.');
  process.exit(1);
}

console.log('‚úÖ Verificando configuraci√≥n...');

// Construir la aplicaci√≥n
console.log('\nüî® Construyendo aplicaci√≥n...');
try {
  execSync('npm run build', { stdio: 'inherit' });
  console.log('‚úÖ Build completado exitosamente');
} catch (error) {
  console.error('‚ùå Error en el build:', error.message);
  process.exit(1);
}

// Verificar que se cre√≥ el directorio out
if (!fs.existsSync('out')) {
  console.error('‚ùå No se cre√≥ el directorio "out". Verifica la configuraci√≥n de Next.js.');
  process.exit(1);
}

console.log('‚úÖ Directorio "out" creado correctamente');

// Crear archivo de configuraci√≥n para Cloudflare
console.log('\nüìù Creando configuraci√≥n para Cloudflare...');

const cloudflareConfig = {
  build: {
    command: 'npm run build',
    cwd: '/',
    watch_dir: 'src'
  },
  environment_variables: {
    NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
    NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    NEXT_PUBLIC_SITE_URL: process.env.NEXT_PUBLIC_SITE_URL,
    NEXT_PUBLIC_DOMAIN: process.env.NEXT_PUBLIC_DOMAIN,
    DIDIT_API_KEY: process.env.DIDIT_API_KEY,
    DIDIT_WEBHOOK_SECRET: process.env.DIDIT_WEBHOOK_SECRET,
    DIDIT_BASE_URL: process.env.DIDIT_BASE_URL,
    NODE_ENV: 'production',
    NEXT_PUBLIC_APP_ENV: 'production'
  }
};

fs.writeFileSync('cloudflare-pages.json', JSON.stringify(cloudflareConfig, null, 2));
console.log('‚úÖ Archivo cloudflare-pages.json creado');

// Crear archivo de redirecciones para SPA
console.log('\nüîÑ Configurando redirecciones...');
const redirectsContent = `# Redirecciones para SPA
/*    /index.html   200

# Redirecciones espec√≠ficas para autenticaci√≥n
/auth/*    /auth/*   200
/api/*     /api/*    200
`;

fs.writeFileSync('out/_redirects', redirectsContent);
console.log('‚úÖ Archivo _redirects creado');

// Crear archivo de headers de seguridad
console.log('\nüîí Configurando headers de seguridad...');
const headersContent = `# Headers de seguridad
/*
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  Referrer-Policy: strict-origin-when-cross-origin
  X-XSS-Protection: 1; mode=block
  Strict-Transport-Security: max-age=31536000; includeSubDomains
`;

fs.writeFileSync('out/_headers', headersContent);
console.log('‚úÖ Archivo _headers creado');

console.log('\nüéâ DESPLIEGUE PREPARADO EXITOSAMENTE');
console.log('=' .repeat(50));

console.log('\nüìã PR√ìXIMOS PASOS:');
console.log('1. Ve a Cloudflare Pages: https://dash.cloudflare.com/pages');
console.log('2. Crea un nuevo proyecto');
console.log('3. Conecta tu repositorio de GitHub');
console.log('4. Configura las variables de entorno desde cloudflare-pages.json');
console.log('5. Despliega la aplicaci√≥n');

console.log('\nüîó URLs importantes:');
console.log(`- Aplicaci√≥n: ${process.env.NEXT_PUBLIC_SITE_URL}`);
console.log(`- Webhook Didit: ${process.env.NEXT_PUBLIC_SITE_URL}/api/webhooks/didit`);
console.log(`- Registro de m√©dicos: ${process.env.NEXT_PUBLIC_SITE_URL}/auth/register/doctor`);

console.log('\nüí° COMANDOS √öTILES:');
console.log('npm run deploy:prepare  # Preparar para despliegue');
console.log('npm run build           # Construir aplicaci√≥n');
console.log('npm run dev             # Desarrollo local');

console.log('\n‚ö†Ô∏è  IMPORTANTE:');
console.log('Despu√©s del despliegue, actualiza la configuraci√≥n del webhook en Didit:');
console.log(`URL: ${process.env.NEXT_PUBLIC_SITE_URL}/api/webhooks/didit`);
console.log(`Secret: ${process.env.DIDIT_WEBHOOK_SECRET}`);
