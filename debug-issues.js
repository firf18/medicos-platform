/**
 * Script de diagn√≥stico para problemas de registro
 */

// 1. Probar validaci√≥n de tel√©fono
async function testPhoneValidation() {
  console.log('üîç Probando validaci√≥n de tel√©fono...');
  
  const testPhone = '+584121234567';
  
  try {
    const response = await fetch('/api/auth/check-phone', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ phone: testPhone }),
    });
    
    const result = await response.json();
    console.log('üì± Resultado validaci√≥n tel√©fono:', result);
    
    if (!result.isAvailable) {
      console.log('‚ùå PROBLEMA: Tel√©fono marcado como no disponible cuando deber√≠a estar disponible');
      console.log('üîç Verificar:');
      console.log('  - Tabla profiles est√° vac√≠a:', result.source);
      console.log('  - Tabla doctor_registrations est√° vac√≠a:', result.source);
    } else {
      console.log('‚úÖ Validaci√≥n de tel√©fono funciona correctamente');
    }
  } catch (error) {
    console.error('‚ùå Error en validaci√≥n de tel√©fono:', error);
  }
}

// 2. Probar env√≠o de c√≥digo de verificaci√≥n
async function testEmailVerification() {
  console.log('üîç Probando env√≠o de c√≥digo de verificaci√≥n...');
  
  const testEmail = 'test@example.com';
  
  try {
    const response = await fetch('/api/auth/send-verification-code', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email: testEmail }),
    });
    
    const result = await response.json();
    console.log('üìß Resultado env√≠o c√≥digo:', result);
    
    if (result.success) {
      console.log('‚úÖ Env√≠o de c√≥digo funciona correctamente');
      console.log('üîç Verificar consola del servidor para ver el c√≥digo generado');
    } else {
      console.log('‚ùå PROBLEMA: No se pudo enviar c√≥digo de verificaci√≥n');
    }
  } catch (error) {
    console.error('‚ùå Error en env√≠o de c√≥digo:', error);
  }
}

// 3. Verificar errores de JavaScript
function checkJavaScriptErrors() {
  console.log('üîç Verificando errores de JavaScript...');
  
  // Verificar si hay errores en la consola
  const originalError = console.error;
  const errors = [];
  
  console.error = function(...args) {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  // Restaurar despu√©s de un tiempo
  setTimeout(() => {
    console.error = originalError;
    
    if (errors.length > 0) {
      console.log('‚ùå PROBLEMA: Errores de JavaScript detectados:');
      errors.forEach(error => console.log('  -', error));
    } else {
      console.log('‚úÖ No se detectaron errores de JavaScript');
    }
  }, 2000);
}

// Ejecutar todas las pruebas
async function runDiagnostics() {
  console.log('üöÄ Iniciando diagn√≥stico de problemas...\n');
  
  await testPhoneValidation();
  console.log('');
  
  await testEmailVerification();
  console.log('');
  
  checkJavaScriptErrors();
  
  console.log('\nüìã Resumen de problemas encontrados:');
  console.log('1. Si el tel√©fono aparece como "no disponible" cuando deber√≠a estar disponible:');
  console.log('   - Verificar que las tablas profiles y doctor_registrations est√©n vac√≠as');
  console.log('   - Revisar la l√≥gica de validaci√≥n en PhoneValidationService');
  console.log('');
  console.log('2. Si no llegan los emails de verificaci√≥n:');
  console.log('   - Verificar configuraci√≥n de Supabase Auth > Email Templates');
  console.log('   - Revisar logs del servidor para c√≥digos generados');
  console.log('   - Verificar que la tabla email_verification_codes existe');
  console.log('');
  console.log('3. Si hay errores de JavaScript:');
  console.log('   - Verificar sintaxis en archivos TypeScript/JavaScript');
  console.log('   - Revisar caracteres especiales o problemas de encoding');
  console.log('   - Limpiar cach√© del navegador y reconstruir');
}

// Ejecutar si estamos en el navegador
if (typeof window !== 'undefined') {
  runDiagnostics();
} else {
  console.log('Ejecutar este script en la consola del navegador');
}
